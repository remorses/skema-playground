var $eece12d95c364845034b3b59d8f32$exports = {};
$parcel$require("170eece12d95c364845034b3b59d8f32", "react");
$parcel$require("170eece12d95c364845034b3b59d8f32", "../CodeEditor");
$parcel$require("170eece12d95c364845034b3b59d8f32", "../store");
$parcel$require("170eece12d95c364845034b3b59d8f32", "hybrid-components");

function $eece12d95c364845034b3b59d8f32$var$_slicedToArray(arr, i) { return $eece12d95c364845034b3b59d8f32$var$_arrayWithHoles(arr) || $eece12d95c364845034b3b59d8f32$var$_iterableToArrayLimit(arr, i) || $eece12d95c364845034b3b59d8f32$var$_nonIterableRest(); }

function $eece12d95c364845034b3b59d8f32$var$_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function $eece12d95c364845034b3b59d8f32$var$_iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function $eece12d95c364845034b3b59d8f32$var$_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function $eece12d95c364845034b3b59d8f32$var$_objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

var $eece12d95c364845034b3b59d8f32$export$default = function () {
  return $eece12d95c364845034b3b59d8f32$import$React.createElement($eece12d95c364845034b3b59d8f32$var$View, null);
};

$eece12d95c364845034b3b59d8f32$exports.default = $eece12d95c364845034b3b59d8f32$export$default;

var $eece12d95c364845034b3b59d8f32$var$View = function View(_ref) {
  $eece12d95c364845034b3b59d8f32$var$_objectDestructuringEmpty(_ref);

  var _useGlobal = $eece12d95c364845034b3b59d8f32$import$useGlobal(),
      _useGlobal2 = $eece12d95c364845034b3b59d8f32$var$_slicedToArray(_useGlobal, 2),
      state = _useGlobal2[0],
      actions = _useGlobal2[1];

  return $eece12d95c364845034b3b59d8f32$import$React.createElement($eece12d95c364845034b3b59d8f32$import$Box, {
    height: "100%",
    overflow: "auto"
  }, $eece12d95c364845034b3b59d8f32$import$React.createElement($eece12d95c364845034b3b59d8f32$import$CodeEditor, {
    onChange: function onChange(code) {
      return actions.setSkemaCode(code);
    },
    value: state.skemaEditor.code,
    language: "yaml",
    minLines: 2000
  }));
};