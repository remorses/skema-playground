var $a707c2f9a333e95d83dd13a093a79177$exports = {};
$parcel$require("a707c2f9a333e95d83dd13a093a79177", "tslib");
$parcel$require("a707c2f9a333e95d83dd13a093a79177", "classnames");
$parcel$require("a707c2f9a333e95d83dd13a093a79177", "react");
$parcel$require("a707c2f9a333e95d83dd13a093a79177", "@blueprintjs/icons");
$parcel$require("a707c2f9a333e95d83dd13a093a79177", "../../common");

var $a707c2f9a333e95d83dd13a093a79177$export$Icon =
/** @class */
function (_super) {
  $a707c2f9a333e95d83dd13a093a79177$import$tslib_1.__extends(Icon, _super);

  function Icon() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Icon.prototype.render = function () {
    var icon = this.props.icon;

    if (icon == null || typeof icon === "boolean") {
      return null;
    } else if (typeof icon !== "string") {
      return icon;
    }

    var _a = this.props,
        className = _a.className,
        color = _a.color,
        htmlTitle = _a.htmlTitle,
        _b = _a.iconSize,
        iconSize = _b === void 0 ? Icon.SIZE_STANDARD : _b,
        intent = _a.intent,
        _c = _a.title,
        title = _c === void 0 ? icon : _c,
        _d = _a.tagName,
        TagName = _d === void 0 ? "span" : _d,
        htmlprops = $a707c2f9a333e95d83dd13a093a79177$import$tslib_1.__rest(_a, ["className", "color", "htmlTitle", "iconSize", "intent", "title", "tagName"]); // choose which pixel grid is most appropriate for given icon size


    var pixelGridSize = iconSize >= Icon.SIZE_LARGE ? Icon.SIZE_LARGE : Icon.SIZE_STANDARD; // render path elements, or nothing if icon name is unknown.

    var paths = this.renderSvgPaths(pixelGridSize, icon);
    var classes = $a707c2f9a333e95d83dd13a093a79177$import$classNames($a707c2f9a333e95d83dd13a093a79177$import$Classes.ICON, $a707c2f9a333e95d83dd13a093a79177$import$Classes.iconClass(icon), $a707c2f9a333e95d83dd13a093a79177$import$Classes.intentClass(intent), className);
    var viewBox = "0 0 " + pixelGridSize + " " + pixelGridSize;
    return $a707c2f9a333e95d83dd13a093a79177$import$React.createElement(TagName, $a707c2f9a333e95d83dd13a093a79177$import$tslib_1.__assign({}, htmlprops, {
      className: classes,
      title: htmlTitle
    }), $a707c2f9a333e95d83dd13a093a79177$import$React.createElement("svg", {
      fill: color,
      "data-icon": icon,
      width: iconSize,
      height: iconSize,
      viewBox: viewBox
    }, title && $a707c2f9a333e95d83dd13a093a79177$import$React.createElement("desc", null, title), paths));
  };
  /** Render `<path>` elements for the given icon name. Returns `null` if name is unknown. */


  Icon.prototype.renderSvgPaths = function (pathsSize, iconName) {
    var svgPathsRecord = pathsSize === Icon.SIZE_STANDARD ? $a707c2f9a333e95d83dd13a093a79177$import$IconSvgPaths16 : $a707c2f9a333e95d83dd13a093a79177$import$IconSvgPaths20;
    var pathStrings = svgPathsRecord[iconName];

    if (pathStrings == null) {
      return null;
    }

    return pathStrings.map(function (d, i) {
      return $a707c2f9a333e95d83dd13a093a79177$import$React.createElement("path", {
        key: i,
        d: d,
        fillRule: "evenodd"
      });
    });
  };

  Icon.displayName = $a707c2f9a333e95d83dd13a093a79177$import$DISPLAYNAME_PREFIX + ".Icon";
  Icon.SIZE_STANDARD = 16;
  Icon.SIZE_LARGE = 20;
  return Icon;
}($a707c2f9a333e95d83dd13a093a79177$import$React.PureComponent);

$a707c2f9a333e95d83dd13a093a79177$exports.Icon = $a707c2f9a333e95d83dd13a093a79177$export$Icon;