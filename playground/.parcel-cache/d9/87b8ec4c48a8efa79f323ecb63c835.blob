var $a7e98d2d570e953da99c71b4543ce0b3$exports = {};
$parcel$require("a7e98d2d570e953da99c71b4543ce0b3", "tslib");
$parcel$require("a7e98d2d570e953da99c71b4543ce0b3", "classnames");
$parcel$require("a7e98d2d570e953da99c71b4543ce0b3", "react");
$parcel$require("a7e98d2d570e953da99c71b4543ce0b3", "../../common/classes");
$parcel$require("a7e98d2d570e953da99c71b4543ce0b3", "../../common/props");
$parcel$require("a7e98d2d570e953da99c71b4543ce0b3", "../../common/utils");
$parcel$require("a7e98d2d570e953da99c71b4543ce0b3", "./treeNode");

var $a7e98d2d570e953da99c71b4543ce0b3$export$Tree =
/** @class */
function (_super) {
  $a7e98d2d570e953da99c71b4543ce0b3$import$tslib_1.__extends(Tree, _super);

  function Tree() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.nodeRefs = {};

    _this.handleNodeCollapse = function (node, e) {
      _this.handlerHelper(_this.props.onNodeCollapse, node, e);
    };

    _this.handleNodeClick = function (node, e) {
      _this.handlerHelper(_this.props.onNodeClick, node, e);
    };

    _this.handleContentRef = function (node, element) {
      if (element != null) {
        _this.nodeRefs[node.props.id] = element;
      } else {
        // don't want our object to get bloated with old keys
        delete _this.nodeRefs[node.props.id];
      }
    };

    _this.handleNodeContextMenu = function (node, e) {
      _this.handlerHelper(_this.props.onNodeContextMenu, node, e);
    };

    _this.handleNodeDoubleClick = function (node, e) {
      _this.handlerHelper(_this.props.onNodeDoubleClick, node, e);
    };

    _this.handleNodeExpand = function (node, e) {
      _this.handlerHelper(_this.props.onNodeExpand, node, e);
    };

    _this.handleNodeMouseEnter = function (node, e) {
      _this.handlerHelper(_this.props.onNodeMouseEnter, node, e);
    };

    _this.handleNodeMouseLeave = function (node, e) {
      _this.handlerHelper(_this.props.onNodeMouseLeave, node, e);
    };

    return _this;
  }

  Tree.ofType = function () {
    return Tree;
  };

  Tree.nodeFromPath = function (path, treeNodes) {
    if (path.length === 1) {
      return treeNodes[path[0]];
    } else {
      return Tree.nodeFromPath(path.slice(1), treeNodes[path[0]].childNodes);
    }
  };

  Tree.prototype.render = function () {
    return $a7e98d2d570e953da99c71b4543ce0b3$import$React.createElement("div", {
      className: $a7e98d2d570e953da99c71b4543ce0b3$import$classNames($a7e98d2d570e953da99c71b4543ce0b3$import$Classes.TREE, this.props.className)
    }, this.renderNodes(this.props.contents, [], $a7e98d2d570e953da99c71b4543ce0b3$import$Classes.TREE_ROOT));
  };
  /**
   * Returns the underlying HTML element of the `Tree` node with an id of `nodeId`.
   * This element does not contain the children of the node, only its label and controls.
   * If the node is not currently mounted, `undefined` is returned.
   */


  Tree.prototype.getNodeContentElement = function (nodeId) {
    return this.nodeRefs[nodeId];
  };

  Tree.prototype.renderNodes = function (treeNodes, currentPath, className) {
    var _this = this;

    if (treeNodes == null) {
      return null;
    }

    var nodeItems = treeNodes.map(function (node, i) {
      var elementPath = currentPath.concat(i);
      var TypedTreeNode = $a7e98d2d570e953da99c71b4543ce0b3$import$TreeNode.ofType();
      return $a7e98d2d570e953da99c71b4543ce0b3$import$React.createElement(TypedTreeNode, $a7e98d2d570e953da99c71b4543ce0b3$import$tslib_1.__assign({}, node, {
        key: node.id,
        contentRef: _this.handleContentRef,
        depth: elementPath.length - 1,
        onClick: _this.handleNodeClick,
        onContextMenu: _this.handleNodeContextMenu,
        onCollapse: _this.handleNodeCollapse,
        onDoubleClick: _this.handleNodeDoubleClick,
        onExpand: _this.handleNodeExpand,
        onMouseEnter: _this.handleNodeMouseEnter,
        onMouseLeave: _this.handleNodeMouseLeave,
        path: elementPath
      }), _this.renderNodes(node.childNodes, elementPath));
    });
    return $a7e98d2d570e953da99c71b4543ce0b3$import$React.createElement("ul", {
      className: $a7e98d2d570e953da99c71b4543ce0b3$import$classNames($a7e98d2d570e953da99c71b4543ce0b3$import$Classes.TREE_NODE_LIST, className)
    }, nodeItems);
  };

  Tree.prototype.handlerHelper = function (handlerFromProps, node, e) {
    if ($a7e98d2d570e953da99c71b4543ce0b3$import$isFunction(handlerFromProps)) {
      var nodeData = Tree.nodeFromPath(node.props.path, this.props.contents);
      handlerFromProps(nodeData, node.props.path, e);
    }
  };

  Tree.displayName = $a7e98d2d570e953da99c71b4543ce0b3$import$DISPLAYNAME_PREFIX + ".Tree";
  return Tree;
}($a7e98d2d570e953da99c71b4543ce0b3$import$React.Component);

$a7e98d2d570e953da99c71b4543ce0b3$exports.Tree = $a7e98d2d570e953da99c71b4543ce0b3$export$Tree;