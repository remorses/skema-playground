var $dd39ef69d79a34bc48f8ecebeb0d5950$exports = {};

/*
 * Copyright 2016 Palantir Technologies, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var $dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes = {
  8: "backspace",
  9: "tab",
  13: "enter",
  20: "capslock",
  27: "esc",
  32: "space",
  33: "pageup",
  34: "pagedown",
  35: "end",
  36: "home",
  37: "left",
  38: "up",
  39: "right",
  40: "down",
  45: "ins",
  46: "del",
  // number keys
  48: "0",
  49: "1",
  50: "2",
  51: "3",
  52: "4",
  53: "5",
  54: "6",
  55: "7",
  56: "8",
  57: "9",
  // alphabet
  65: "a",
  66: "b",
  67: "c",
  68: "d",
  69: "e",
  70: "f",
  71: "g",
  72: "h",
  73: "i",
  74: "j",
  75: "k",
  76: "l",
  77: "m",
  78: "n",
  79: "o",
  80: "p",
  81: "q",
  82: "r",
  83: "s",
  84: "t",
  85: "u",
  86: "v",
  87: "w",
  88: "x",
  89: "y",
  90: "z",
  // punctuation
  106: "*",
  107: "+",
  109: "-",
  110: ".",
  111: "/",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
$dd39ef69d79a34bc48f8ecebeb0d5950$exports.KeyCodes = $dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes;
var $dd39ef69d79a34bc48f8ecebeb0d5950$export$Modifiers = {
  16: "shift",
  17: "ctrl",
  18: "alt",
  91: "meta",
  93: "meta",
  224: "meta"
};
$dd39ef69d79a34bc48f8ecebeb0d5950$exports.Modifiers = $dd39ef69d79a34bc48f8ecebeb0d5950$export$Modifiers;
var $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks = {
  alt: 1,
  ctrl: 2,
  meta: 4,
  shift: 8
};
$dd39ef69d79a34bc48f8ecebeb0d5950$exports.ModifierBitMasks = $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks;
var $dd39ef69d79a34bc48f8ecebeb0d5950$export$Aliases = {
  cmd: "meta",
  command: "meta",
  escape: "esc",
  minus: "-",
  mod: $dd39ef69d79a34bc48f8ecebeb0d5950$var$isMac() ? "meta" : "ctrl",
  option: "alt",
  plus: "+",
  return: "enter",
  win: "meta"
}; // alph sorting is unintuitive here
// tslint:disable object-literal-sort-keys

$dd39ef69d79a34bc48f8ecebeb0d5950$exports.Aliases = $dd39ef69d79a34bc48f8ecebeb0d5950$export$Aliases;
var $dd39ef69d79a34bc48f8ecebeb0d5950$export$ShiftKeys = {
  "~": "`",
  "!": "1",
  "@": "2",
  "#": "3",
  $: "4",
  "%": "5",
  "^": "6",
  "&": "7",
  "*": "8",
  "(": "9",
  ")": "0",
  _: "-",
  "+": "=",
  "{": "[",
  "}": "]",
  "|": "\\",
  ":": ";",
  '"': "'",
  "<": ",",
  ">": ".",
  "?": "/"
}; // tslint:enable object-literal-sort-keys
// Function keys

$dd39ef69d79a34bc48f8ecebeb0d5950$exports.ShiftKeys = $dd39ef69d79a34bc48f8ecebeb0d5950$export$ShiftKeys;

for (var $dd39ef69d79a34bc48f8ecebeb0d5950$var$i = 1; $dd39ef69d79a34bc48f8ecebeb0d5950$var$i <= 12; ++$dd39ef69d79a34bc48f8ecebeb0d5950$var$i) {
  $dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes[111 + $dd39ef69d79a34bc48f8ecebeb0d5950$var$i] = "f" + $dd39ef69d79a34bc48f8ecebeb0d5950$var$i;
} // Numpad


for (var $dd39ef69d79a34bc48f8ecebeb0d5950$var$i = 0; $dd39ef69d79a34bc48f8ecebeb0d5950$var$i <= 9; ++$dd39ef69d79a34bc48f8ecebeb0d5950$var$i) {
  $dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes[96 + $dd39ef69d79a34bc48f8ecebeb0d5950$var$i] = "num" + $dd39ef69d79a34bc48f8ecebeb0d5950$var$i.toString();
}

function $dd39ef69d79a34bc48f8ecebeb0d5950$export$comboMatches(a, b) {
  return a.modifiers === b.modifiers && a.key === b.key;
}
/**
 * Converts a key combo string into a key combo object. Key combos include
 * zero or more modifier keys, such as `shift` or `alt`, and exactly one
 * action key, such as `A`, `enter`, or `left`.
 *
 * For action keys that require a shift, e.g. `@` or `|`, we inlude the
 * necessary `shift` modifier and automatically convert the action key to the
 * unshifted version. For example, `@` is equivalent to `shift+2`.
 */


$dd39ef69d79a34bc48f8ecebeb0d5950$exports.comboMatches = $dd39ef69d79a34bc48f8ecebeb0d5950$export$comboMatches;

var $dd39ef69d79a34bc48f8ecebeb0d5950$export$parseKeyCombo = function (combo) {
  var pieces = combo.replace(/\s/g, "").toLowerCase().split("+");
  var modifiers = 0;
  var key = null;

  for (var _i = 0, pieces_1 = pieces; _i < pieces_1.length; _i++) {
    var piece = pieces_1[_i];

    if (piece === "") {
      throw new Error("Failed to parse key combo \"" + combo + "\".\n                Valid key combos look like \"cmd + plus\", \"shift+p\", or \"!\"");
    }

    if ($dd39ef69d79a34bc48f8ecebeb0d5950$export$Aliases[piece] != null) {
      piece = $dd39ef69d79a34bc48f8ecebeb0d5950$export$Aliases[piece];
    }

    if ($dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks[piece] != null) {
      modifiers += $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks[piece];
    } else if ($dd39ef69d79a34bc48f8ecebeb0d5950$export$ShiftKeys[piece] != null) {
      // tslint:disable-next-line no-string-literal
      modifiers += $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks["shift"];
      key = $dd39ef69d79a34bc48f8ecebeb0d5950$export$ShiftKeys[piece];
    } else {
      key = piece.toLowerCase();
    }
  }

  return {
    modifiers: modifiers,
    key: key
  };
};
/**
 * Converts a keyboard event into a valid combo prop string
 */


$dd39ef69d79a34bc48f8ecebeb0d5950$exports.parseKeyCombo = $dd39ef69d79a34bc48f8ecebeb0d5950$export$parseKeyCombo;

var $dd39ef69d79a34bc48f8ecebeb0d5950$export$getKeyComboString = function (e) {
  var keys = []; // modifiers first

  if (e.ctrlKey) {
    keys.push("ctrl");
  }

  if (e.altKey) {
    keys.push("alt");
  }

  if (e.shiftKey) {
    keys.push("shift");
  }

  if (e.metaKey) {
    keys.push("meta");
  }

  var which = e.which;

  if ($dd39ef69d79a34bc48f8ecebeb0d5950$export$Modifiers[which] != null) {// no action key
  } else if ($dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes[which] != null) {
    keys.push($dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes[which]);
  } else {
    keys.push(String.fromCharCode(which).toLowerCase());
  } // join keys with plusses


  return keys.join(" + ");
};
/**
 * Determines the key combo object from the given keyboard event. Again, a key
 * combo includes zero or more modifiers (represented by a bitmask) and one
 * action key, which we determine from the `e.which` property of the keyboard
 * event.
 */


$dd39ef69d79a34bc48f8ecebeb0d5950$exports.getKeyComboString = $dd39ef69d79a34bc48f8ecebeb0d5950$export$getKeyComboString;

var $dd39ef69d79a34bc48f8ecebeb0d5950$export$getKeyCombo = function (e) {
  var key = null;
  var which = e.which;

  if ($dd39ef69d79a34bc48f8ecebeb0d5950$export$Modifiers[which] != null) {// keep key null
  } else if ($dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes[which] != null) {
    key = $dd39ef69d79a34bc48f8ecebeb0d5950$export$KeyCodes[which];
  } else {
    key = String.fromCharCode(which).toLowerCase();
  }

  var modifiers = 0; // tslint:disable no-string-literal

  if (e.altKey) {
    modifiers += $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks["alt"];
  }

  if (e.ctrlKey) {
    modifiers += $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks["ctrl"];
  }

  if (e.metaKey) {
    modifiers += $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks["meta"];
  }

  if (e.shiftKey) {
    modifiers += $dd39ef69d79a34bc48f8ecebeb0d5950$export$ModifierBitMasks["shift"];
  } // tslint:enable


  return {
    modifiers: modifiers,
    key: key
  };
};
/**
 * Splits a key combo string into its constituent key values and looks up
 * aliases, such as `return` -> `enter`.
 *
 * Unlike the parseKeyCombo method, this method does NOT convert shifted
 * action keys. So `"@"` will NOT be converted to `["shift", "2"]`).
 */


$dd39ef69d79a34bc48f8ecebeb0d5950$exports.getKeyCombo = $dd39ef69d79a34bc48f8ecebeb0d5950$export$getKeyCombo;

var $dd39ef69d79a34bc48f8ecebeb0d5950$export$normalizeKeyCombo = function (combo, platformOverride) {
  var keys = combo.replace(/\s/g, "").split("+");
  return keys.map(function (key) {
    var keyName = $dd39ef69d79a34bc48f8ecebeb0d5950$export$Aliases[key] != null ? $dd39ef69d79a34bc48f8ecebeb0d5950$export$Aliases[key] : key;
    return keyName === "meta" ? $dd39ef69d79a34bc48f8ecebeb0d5950$var$isMac(platformOverride) ? "cmd" : "ctrl" : keyName;
  });
};
/* tslint:enable:no-string-literal */


$dd39ef69d79a34bc48f8ecebeb0d5950$exports.normalizeKeyCombo = $dd39ef69d79a34bc48f8ecebeb0d5950$export$normalizeKeyCombo;

function $dd39ef69d79a34bc48f8ecebeb0d5950$var$isMac(platformOverride) {
  var platform = platformOverride != null ? platformOverride : typeof navigator !== "undefined" ? navigator.platform : undefined;
  return platform == null ? false : /Mac|iPod|iPhone|iPad/.test(platform);
} //# sourceMappingURL=hotkeyParser.js.map