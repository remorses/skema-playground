var $e14e51016b5ffede6e6bb7673499c$var$_temp,
    $e14e51016b5ffede6e6bb7673499c$exports = {};
$parcel$require("368e14e51016b5ffede6e6bb7673499c", "graphql-tag");
$parcel$require("368e14e51016b5ffede6e6bb7673499c", "react");
$parcel$require("368e14e51016b5ffede6e6bb7673499c", "@apollo/react-components");
$parcel$require("368e14e51016b5ffede6e6bb7673499c", "@apollo/react-hoc");
$parcel$require("368e14e51016b5ffede6e6bb7673499c", "@apollo/react-hooks");

function $e14e51016b5ffede6e6bb7673499c$var$_templateObject2() {
  var data = $e14e51016b5ffede6e6bb7673499c$var$_taggedTemplateLiteral(["\n    mutation GetOutputCode(\n        $skema: String!\n        $language: LanguageName!\n        $options: Json!\n    ) {\n        output: getOutput(\n            skema: $skema\n            language: $language\n            options: $options\n        ) {\n            code\n        }\n    }\n"]);

  $e14e51016b5ffede6e6bb7673499c$var$_templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function $e14e51016b5ffede6e6bb7673499c$var$ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function $e14e51016b5ffede6e6bb7673499c$var$_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { $e14e51016b5ffede6e6bb7673499c$var$ownKeys(source, true).forEach(function (key) { $e14e51016b5ffede6e6bb7673499c$var$_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { $e14e51016b5ffede6e6bb7673499c$var$ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function $e14e51016b5ffede6e6bb7673499c$var$_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function $e14e51016b5ffede6e6bb7673499c$var$_extends() { $e14e51016b5ffede6e6bb7673499c$var$_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return $e14e51016b5ffede6e6bb7673499c$var$_extends.apply(this, arguments); }

function $e14e51016b5ffede6e6bb7673499c$var$_templateObject() {
  var data = $e14e51016b5ffede6e6bb7673499c$var$_taggedTemplateLiteral(["\n    query GetLanguages {\n        languages {\n            name\n            optionsSchema\n        }\n    }\n"]);

  $e14e51016b5ffede6e6bb7673499c$var$_templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function $e14e51016b5ffede6e6bb7673499c$var$_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var $e14e51016b5ffede6e6bb7673499c$export$LanguageName;
$e14e51016b5ffede6e6bb7673499c$exports.LanguageName = $e14e51016b5ffede6e6bb7673499c$export$LanguageName;

(function (LanguageName) {
  LanguageName["Python"] = "python";
  LanguageName["Typescript"] = "typescript";
})($e14e51016b5ffede6e6bb7673499c$export$LanguageName || ($e14e51016b5ffede6e6bb7673499c$var$_temp = $e14e51016b5ffede6e6bb7673499c$export$LanguageName = {}, $e14e51016b5ffede6e6bb7673499c$exports.LanguageName = $e14e51016b5ffede6e6bb7673499c$export$LanguageName, $e14e51016b5ffede6e6bb7673499c$var$_temp));

var $e14e51016b5ffede6e6bb7673499c$export$GetLanguagesDocument = $e14e51016b5ffede6e6bb7673499c$import$gql($e14e51016b5ffede6e6bb7673499c$var$_templateObject());
$e14e51016b5ffede6e6bb7673499c$exports.GetLanguagesDocument = $e14e51016b5ffede6e6bb7673499c$export$GetLanguagesDocument;

var $e14e51016b5ffede6e6bb7673499c$export$GetLanguagesComponent = function GetLanguagesComponent(props) {
  return $e14e51016b5ffede6e6bb7673499c$import$React.createElement($e14e51016b5ffede6e6bb7673499c$import$ApolloReactComponents.Query, $e14e51016b5ffede6e6bb7673499c$var$_extends({
    query: $e14e51016b5ffede6e6bb7673499c$export$GetLanguagesDocument
  }, props));
};

$e14e51016b5ffede6e6bb7673499c$exports.GetLanguagesComponent = $e14e51016b5ffede6e6bb7673499c$export$GetLanguagesComponent;

function $e14e51016b5ffede6e6bb7673499c$export$withGetLanguages(operationOptions) {
  return $e14e51016b5ffede6e6bb7673499c$import$ApolloReactHoc.withQuery($e14e51016b5ffede6e6bb7673499c$export$GetLanguagesDocument, $e14e51016b5ffede6e6bb7673499c$var$_objectSpread({
    alias: 'getLanguages'
  }, operationOptions));
}
/**
 * __useGetLanguagesQuery__
 *
 * To run a query within a React component, call `useGetLanguagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetLanguagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetLanguagesQuery({
 *   variables: {
 *   },
 * });
 */


$e14e51016b5ffede6e6bb7673499c$exports.withGetLanguages = $e14e51016b5ffede6e6bb7673499c$export$withGetLanguages;

function $e14e51016b5ffede6e6bb7673499c$export$useGetLanguagesQuery(baseOptions) {
  return $e14e51016b5ffede6e6bb7673499c$import$ApolloReactHooks.useQuery($e14e51016b5ffede6e6bb7673499c$export$GetLanguagesDocument, baseOptions);
}

$e14e51016b5ffede6e6bb7673499c$exports.useGetLanguagesQuery = $e14e51016b5ffede6e6bb7673499c$export$useGetLanguagesQuery;

function $e14e51016b5ffede6e6bb7673499c$export$useGetLanguagesLazyQuery(baseOptions) {
  return $e14e51016b5ffede6e6bb7673499c$import$ApolloReactHooks.useLazyQuery($e14e51016b5ffede6e6bb7673499c$export$GetLanguagesDocument, baseOptions);
}

$e14e51016b5ffede6e6bb7673499c$exports.useGetLanguagesLazyQuery = $e14e51016b5ffede6e6bb7673499c$export$useGetLanguagesLazyQuery;
var $e14e51016b5ffede6e6bb7673499c$export$GetOutputCodeDocument = $e14e51016b5ffede6e6bb7673499c$import$gql($e14e51016b5ffede6e6bb7673499c$var$_templateObject2());
$e14e51016b5ffede6e6bb7673499c$exports.GetOutputCodeDocument = $e14e51016b5ffede6e6bb7673499c$export$GetOutputCodeDocument;

var $e14e51016b5ffede6e6bb7673499c$export$GetOutputCodeComponent = function GetOutputCodeComponent(props) {
  return $e14e51016b5ffede6e6bb7673499c$import$React.createElement($e14e51016b5ffede6e6bb7673499c$import$ApolloReactComponents.Mutation, $e14e51016b5ffede6e6bb7673499c$var$_extends({
    mutation: $e14e51016b5ffede6e6bb7673499c$export$GetOutputCodeDocument
  }, props));
};

$e14e51016b5ffede6e6bb7673499c$exports.GetOutputCodeComponent = $e14e51016b5ffede6e6bb7673499c$export$GetOutputCodeComponent;

function $e14e51016b5ffede6e6bb7673499c$export$withGetOutputCode(operationOptions) {
  return $e14e51016b5ffede6e6bb7673499c$import$ApolloReactHoc.withMutation($e14e51016b5ffede6e6bb7673499c$export$GetOutputCodeDocument, $e14e51016b5ffede6e6bb7673499c$var$_objectSpread({
    alias: 'getOutputCode'
  }, operationOptions));
}
/**
 * __useGetOutputCodeMutation__
 *
 * To run a mutation, you first call `useGetOutputCodeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGetOutputCodeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [getOutputCodeMutation, { data, loading, error }] = useGetOutputCodeMutation({
 *   variables: {
 *      skema: // value for 'skema'
 *      language: // value for 'language'
 *      options: // value for 'options'
 *   },
 * });
 */


$e14e51016b5ffede6e6bb7673499c$exports.withGetOutputCode = $e14e51016b5ffede6e6bb7673499c$export$withGetOutputCode;

function $e14e51016b5ffede6e6bb7673499c$export$useGetOutputCodeMutation(baseOptions) {
  return $e14e51016b5ffede6e6bb7673499c$import$ApolloReactHooks.useMutation($e14e51016b5ffede6e6bb7673499c$export$GetOutputCodeDocument, baseOptions);
}

$e14e51016b5ffede6e6bb7673499c$exports.useGetOutputCodeMutation = $e14e51016b5ffede6e6bb7673499c$export$useGetOutputCodeMutation;