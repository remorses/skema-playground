var $aac2e65987a94a6b3e509bdbdd6a3e$exports = {};
var $aac2e65987a94a6b3e509bdbdd6a3e$var$compileSchema = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile/resolve"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$Cache = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./cache"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$SchemaObject = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile/schema_obj"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$stableStringify = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "fast-json-stable-stringify"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$formats = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile/formats"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$rules = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile/rules"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$$dataMetaSchema = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./data"),
    $aac2e65987a94a6b3e509bdbdd6a3e$var$util = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile/util");
$aac2e65987a94a6b3e509bdbdd6a3e$exports = $aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.validate = $aac2e65987a94a6b3e509bdbdd6a3e$var$validate;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.compile = $aac2e65987a94a6b3e509bdbdd6a3e$var$compile;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.addSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$addSchema;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.addMetaSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$addMetaSchema;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.validateSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$validateSchema;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.getSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$getSchema;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.removeSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$removeSchema;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.addFormat = $aac2e65987a94a6b3e509bdbdd6a3e$var$addFormat;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.errorsText = $aac2e65987a94a6b3e509bdbdd6a3e$var$errorsText;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype._addSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$_addSchema;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype._compile = $aac2e65987a94a6b3e509bdbdd6a3e$var$_compile;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.compileAsync = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile/async");
var $aac2e65987a94a6b3e509bdbdd6a3e$var$customKeyword = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./keyword");
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.addKeyword = $aac2e65987a94a6b3e509bdbdd6a3e$var$customKeyword.add;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.getKeyword = $aac2e65987a94a6b3e509bdbdd6a3e$var$customKeyword.get;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.removeKeyword = $aac2e65987a94a6b3e509bdbdd6a3e$var$customKeyword.remove;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.prototype.validateKeyword = $aac2e65987a94a6b3e509bdbdd6a3e$var$customKeyword.validate;
var $aac2e65987a94a6b3e509bdbdd6a3e$var$errorClasses = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./compile/error_classes");
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.ValidationError = $aac2e65987a94a6b3e509bdbdd6a3e$var$errorClasses.Validation;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.MissingRefError = $aac2e65987a94a6b3e509bdbdd6a3e$var$errorClasses.MissingRef;
$aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv.$dataMetaSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$$dataMetaSchema;
var $aac2e65987a94a6b3e509bdbdd6a3e$var$META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';
var $aac2e65987a94a6b3e509bdbdd6a3e$var$META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes', 'strictDefaults'];
var $aac2e65987a94a6b3e509bdbdd6a3e$var$META_SUPPORT_DATA = ['/properties'];
/**
 * Creates validator instance.
 * Usage: `Ajv(opts)`
 * @param {Object} opts optional options
 * @return {Object} ajv instance
 */

function $aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv(opts) {
  if (!(this instanceof $aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv)) return new $aac2e65987a94a6b3e509bdbdd6a3e$var$Ajv(opts);
  opts = this._opts = $aac2e65987a94a6b3e509bdbdd6a3e$var$util.copy(opts) || {};
  $aac2e65987a94a6b3e509bdbdd6a3e$var$setLogger(this);
  this._schemas = {};
  this._refs = {};
  this._fragments = {};
  this._formats = $aac2e65987a94a6b3e509bdbdd6a3e$var$formats(opts.format);
  this._cache = opts.cache || new $aac2e65987a94a6b3e509bdbdd6a3e$var$Cache();
  this._loadingSchemas = {};
  this._compilations = [];
  this.RULES = $aac2e65987a94a6b3e509bdbdd6a3e$var$rules();
  this._getId = $aac2e65987a94a6b3e509bdbdd6a3e$var$chooseGetId(opts);
  opts.loopRequired = opts.loopRequired || Infinity;
  if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
  if (opts.serialize === undefined) opts.serialize = $aac2e65987a94a6b3e509bdbdd6a3e$var$stableStringify;
  this._metaOpts = $aac2e65987a94a6b3e509bdbdd6a3e$var$getMetaSchemaOptions(this);
  if (opts.formats) $aac2e65987a94a6b3e509bdbdd6a3e$var$addInitialFormats(this);
  $aac2e65987a94a6b3e509bdbdd6a3e$var$addDefaultMetaSchema(this);
  if (typeof opts.meta == 'object') this.addMetaSchema(opts.meta);
  if (opts.nullable) this.addKeyword('nullable', {
    metaSchema: {
      type: 'boolean'
    }
  });
  $aac2e65987a94a6b3e509bdbdd6a3e$var$addInitialSchemas(this);
}
/**
 * Validate data using schema
 * Schema will be compiled and cached (using serialized JSON as key. [fast-json-stable-stringify](https://github.com/epoberezkin/fast-json-stable-stringify) is used to serialize.
 * @this   Ajv
 * @param  {String|Object} schemaKeyRef key, ref or schema object
 * @param  {Any} data to be validated
 * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$validate(schemaKeyRef, data) {
  var v;

  if (typeof schemaKeyRef == 'string') {
    v = this.getSchema(schemaKeyRef);
    if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
  } else {
    var schemaObj = this._addSchema(schemaKeyRef);

    v = schemaObj.validate || this._compile(schemaObj);
  }

  var valid = v(data);
  if (v.$async !== true) this.errors = v.errors;
  return valid;
}
/**
 * Create validating function for passed schema.
 * @this   Ajv
 * @param  {Object} schema schema object
 * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
 * @return {Function} validating function
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$compile(schema, _meta) {
  var schemaObj = this._addSchema(schema, undefined, _meta);

  return schemaObj.validate || this._compile(schemaObj);
}
/**
 * Adds schema to the instance.
 * @this   Ajv
 * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
 * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
 * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
 * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
 * @return {Ajv} this for method chaining
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$addSchema(schema, key, _skipValidation, _meta) {
  if (Array.isArray(schema)) {
    for (var i = 0; i < schema.length; i++) this.addSchema(schema[i], undefined, _skipValidation, _meta);

    return this;
  }

  var id = this._getId(schema);

  if (id !== undefined && typeof id != 'string') throw new Error('schema id must be string');
  key = $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve.normalizeId(key || id);
  $aac2e65987a94a6b3e509bdbdd6a3e$var$checkUnique(this, key);
  this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
  return this;
}
/**
 * Add schema that will be used to validate other schemas
 * options in META_IGNORE_OPTIONS are alway set to false
 * @this   Ajv
 * @param {Object} schema schema object
 * @param {String} key optional schema key
 * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
 * @return {Ajv} this for method chaining
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$addMetaSchema(schema, key, skipValidation) {
  this.addSchema(schema, key, skipValidation, true);
  return this;
}
/**
 * Validate schema
 * @this   Ajv
 * @param {Object} schema schema to validate
 * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
 * @return {Boolean} true if schema is valid
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$validateSchema(schema, throwOrLogError) {
  var $schema = schema.$schema;
  if ($schema !== undefined && typeof $schema != 'string') throw new Error('$schema must be a string');
  $schema = $schema || this._opts.defaultMeta || $aac2e65987a94a6b3e509bdbdd6a3e$var$defaultMeta(this);

  if (!$schema) {
    this.logger.warn('meta-schema not available');
    this.errors = null;
    return true;
  }

  var valid = this.validate($schema, schema);

  if (!valid && throwOrLogError) {
    var message = 'schema is invalid: ' + this.errorsText();
    if (this._opts.validateSchema == 'log') this.logger.error(message);else throw new Error(message);
  }

  return valid;
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$defaultMeta(self) {
  var meta = self._opts.meta;
  self._opts.defaultMeta = typeof meta == 'object' ? self._getId(meta) || meta : self.getSchema($aac2e65987a94a6b3e509bdbdd6a3e$var$META_SCHEMA_ID) ? $aac2e65987a94a6b3e509bdbdd6a3e$var$META_SCHEMA_ID : undefined;
  return self._opts.defaultMeta;
}
/**
 * Get compiled schema from the instance by `key` or `ref`.
 * @this   Ajv
 * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
 * @return {Function} schema validating function (with property `schema`).
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$getSchema(keyRef) {
  var schemaObj = $aac2e65987a94a6b3e509bdbdd6a3e$var$_getSchemaObj(this, keyRef);

  switch (typeof schemaObj) {
    case 'object':
      return schemaObj.validate || this._compile(schemaObj);

    case 'string':
      return this.getSchema(schemaObj);

    case 'undefined':
      return $aac2e65987a94a6b3e509bdbdd6a3e$var$_getSchemaFragment(this, keyRef);
  }
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$_getSchemaFragment(self, ref) {
  var res = $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve.schema.call(self, {
    schema: {}
  }, ref);

  if (res) {
    var schema = res.schema,
        root = res.root,
        baseId = res.baseId;
    var v = $aac2e65987a94a6b3e509bdbdd6a3e$var$compileSchema.call(self, schema, root, undefined, baseId);
    self._fragments[ref] = new $aac2e65987a94a6b3e509bdbdd6a3e$var$SchemaObject({
      ref: ref,
      fragment: true,
      schema: schema,
      root: root,
      baseId: baseId,
      validate: v
    });
    return v;
  }
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$_getSchemaObj(self, keyRef) {
  keyRef = $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve.normalizeId(keyRef);
  return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
}
/**
 * Remove cached schema(s).
 * If no parameter is passed all schemas but meta-schemas are removed.
 * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
 * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
 * @this   Ajv
 * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
 * @return {Ajv} this for method chaining
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$removeSchema(schemaKeyRef) {
  if (schemaKeyRef instanceof RegExp) {
    $aac2e65987a94a6b3e509bdbdd6a3e$var$_removeAllSchemas(this, this._schemas, schemaKeyRef);
    $aac2e65987a94a6b3e509bdbdd6a3e$var$_removeAllSchemas(this, this._refs, schemaKeyRef);
    return this;
  }

  switch (typeof schemaKeyRef) {
    case 'undefined':
      $aac2e65987a94a6b3e509bdbdd6a3e$var$_removeAllSchemas(this, this._schemas);
      $aac2e65987a94a6b3e509bdbdd6a3e$var$_removeAllSchemas(this, this._refs);

      this._cache.clear();

      return this;

    case 'string':
      var schemaObj = $aac2e65987a94a6b3e509bdbdd6a3e$var$_getSchemaObj(this, schemaKeyRef);
      if (schemaObj) this._cache.del(schemaObj.cacheKey);
      delete this._schemas[schemaKeyRef];
      delete this._refs[schemaKeyRef];
      return this;

    case 'object':
      var serialize = this._opts.serialize;
      var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;

      this._cache.del(cacheKey);

      var id = this._getId(schemaKeyRef);

      if (id) {
        id = $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve.normalizeId(id);
        delete this._schemas[id];
        delete this._refs[id];
      }

  }

  return this;
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$_removeAllSchemas(self, schemas, regex) {
  for (var keyRef in schemas) {
    var schemaObj = schemas[keyRef];

    if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
      self._cache.del(schemaObj.cacheKey);

      delete schemas[keyRef];
    }
  }
}
/* @this   Ajv */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$_addSchema(schema, skipValidation, meta, shouldAddSchema) {
  if (typeof schema != 'object' && typeof schema != 'boolean') throw new Error('schema should be object or boolean');
  var serialize = this._opts.serialize;
  var cacheKey = serialize ? serialize(schema) : schema;

  var cached = this._cache.get(cacheKey);

  if (cached) return cached;
  shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
  var id = $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve.normalizeId(this._getId(schema));
  if (id && shouldAddSchema) $aac2e65987a94a6b3e509bdbdd6a3e$var$checkUnique(this, id);
  var willValidate = this._opts.validateSchema !== false && !skipValidation;
  var recursiveMeta;
  if (willValidate && !(recursiveMeta = id && id == $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve.normalizeId(schema.$schema))) this.validateSchema(schema, true);
  var localRefs = $aac2e65987a94a6b3e509bdbdd6a3e$var$resolve.ids.call(this, schema);
  var schemaObj = new $aac2e65987a94a6b3e509bdbdd6a3e$var$SchemaObject({
    id: id,
    schema: schema,
    localRefs: localRefs,
    cacheKey: cacheKey,
    meta: meta
  });
  if (id[0] != '#' && shouldAddSchema) this._refs[id] = schemaObj;

  this._cache.put(cacheKey, schemaObj);

  if (willValidate && recursiveMeta) this.validateSchema(schema, true);
  return schemaObj;
}
/* @this   Ajv */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$_compile(schemaObj, root) {
  if (schemaObj.compiling) {
    schemaObj.validate = callValidate;
    callValidate.schema = schemaObj.schema;
    callValidate.errors = null;
    callValidate.root = root ? root : callValidate;
    if (schemaObj.schema.$async === true) callValidate.$async = true;
    return callValidate;
  }

  schemaObj.compiling = true;
  var currentOpts;

  if (schemaObj.meta) {
    currentOpts = this._opts;
    this._opts = this._metaOpts;
  }

  var v;

  try {
    v = $aac2e65987a94a6b3e509bdbdd6a3e$var$compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);
  } catch (e) {
    delete schemaObj.validate;
    throw e;
  } finally {
    schemaObj.compiling = false;
    if (schemaObj.meta) this._opts = currentOpts;
  }

  schemaObj.validate = v;
  schemaObj.refs = v.refs;
  schemaObj.refVal = v.refVal;
  schemaObj.root = v.root;
  return v;
  /* @this   {*} - custom context, see passContext option */

  function callValidate() {
    /* jshint validthis: true */
    var _validate = schemaObj.validate;

    var result = _validate.apply(this, arguments);

    callValidate.errors = _validate.errors;
    return result;
  }
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$chooseGetId(opts) {
  switch (opts.schemaId) {
    case 'auto':
      return $aac2e65987a94a6b3e509bdbdd6a3e$var$_get$IdOrId;

    case 'id':
      return $aac2e65987a94a6b3e509bdbdd6a3e$var$_getId;

    default:
      return $aac2e65987a94a6b3e509bdbdd6a3e$var$_get$Id;
  }
}
/* @this   Ajv */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$_getId(schema) {
  if (schema.$id) this.logger.warn('schema $id ignored', schema.$id);
  return schema.id;
}
/* @this   Ajv */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$_get$Id(schema) {
  if (schema.id) this.logger.warn('schema id ignored', schema.id);
  return schema.$id;
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$_get$IdOrId(schema) {
  if (schema.$id && schema.id && schema.$id != schema.id) throw new Error('schema $id is different from id');
  return schema.$id || schema.id;
}
/**
 * Convert array of error message objects to string
 * @this   Ajv
 * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
 * @param  {Object} options optional options with properties `separator` and `dataVar`.
 * @return {String} human readable string with all errors descriptions
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$errorsText(errors, options) {
  errors = errors || this.errors;
  if (!errors) return 'No errors';
  options = options || {};
  var separator = options.separator === undefined ? ', ' : options.separator;
  var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;
  var text = '';

  for (var i = 0; i < errors.length; i++) {
    var e = errors[i];
    if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
  }

  return text.slice(0, -separator.length);
}
/**
 * Add custom format
 * @this   Ajv
 * @param {String} name format name
 * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
 * @return {Ajv} this for method chaining
 */


function $aac2e65987a94a6b3e509bdbdd6a3e$var$addFormat(name, format) {
  if (typeof format == 'string') format = new RegExp(format);
  this._formats[name] = format;
  return this;
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$addDefaultMetaSchema(self) {
  var $dataSchema;

  if (self._opts.$data) {
    $dataSchema = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./refs/data.json");
    self.addMetaSchema($dataSchema, $dataSchema.$id, true);
  }

  if (self._opts.meta === false) return;
  var metaSchema = $parcel$require("34aac2e65987a94a6b3e509bdbdd6a3e", "./refs/json-schema-draft-07.json");
  if (self._opts.$data) metaSchema = $aac2e65987a94a6b3e509bdbdd6a3e$var$$dataMetaSchema(metaSchema, $aac2e65987a94a6b3e509bdbdd6a3e$var$META_SUPPORT_DATA);
  self.addMetaSchema(metaSchema, $aac2e65987a94a6b3e509bdbdd6a3e$var$META_SCHEMA_ID, true);
  self._refs['http://json-schema.org/schema'] = $aac2e65987a94a6b3e509bdbdd6a3e$var$META_SCHEMA_ID;
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$addInitialSchemas(self) {
  var optsSchemas = self._opts.schemas;
  if (!optsSchemas) return;
  if (Array.isArray(optsSchemas)) self.addSchema(optsSchemas);else for (var key in optsSchemas) self.addSchema(optsSchemas[key], key);
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$addInitialFormats(self) {
  for (var name in self._opts.formats) {
    var format = self._opts.formats[name];
    self.addFormat(name, format);
  }
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$checkUnique(self, id) {
  if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id "' + id + '" already exists');
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$getMetaSchemaOptions(self) {
  var metaOpts = $aac2e65987a94a6b3e509bdbdd6a3e$var$util.copy(self._opts);

  for (var i = 0; i < $aac2e65987a94a6b3e509bdbdd6a3e$var$META_IGNORE_OPTIONS.length; i++) delete metaOpts[$aac2e65987a94a6b3e509bdbdd6a3e$var$META_IGNORE_OPTIONS[i]];

  return metaOpts;
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$setLogger(self) {
  var logger = self._opts.logger;

  if (logger === false) {
    self.logger = {
      log: $aac2e65987a94a6b3e509bdbdd6a3e$var$noop,
      warn: $aac2e65987a94a6b3e509bdbdd6a3e$var$noop,
      error: $aac2e65987a94a6b3e509bdbdd6a3e$var$noop
    };
  } else {
    if (logger === undefined) logger = console;
    if (!(typeof logger == 'object' && logger.log && logger.warn && logger.error)) throw new Error('logger must implement log, warn and error methods');
    self.logger = logger;
  }
}

function $aac2e65987a94a6b3e509bdbdd6a3e$var$noop() {}