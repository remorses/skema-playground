var $dbfc4835a0aefbc758ad211988cf4792$exports = {};
var $dbfc4835a0aefbc758ad211988cf4792$var$process = $parcel$require("dbfc4835a0aefbc758ad211988cf4792", "process");
$parcel$require("dbfc4835a0aefbc758ad211988cf4792", "react");
$parcel$require("dbfc4835a0aefbc758ad211988cf4792", "./errors");
$parcel$exportWildcard($dbfc4835a0aefbc758ad211988cf4792$exports, $parcel$require("dbfc4835a0aefbc758ad211988cf4792", "./utils/compareUtils"));
$parcel$exportWildcard($dbfc4835a0aefbc758ad211988cf4792$exports, $parcel$require("dbfc4835a0aefbc758ad211988cf4792", "./utils/safeInvokeMember"));
/** Returns whether `process.env.NODE_ENV` exists and equals `env`. */

function $dbfc4835a0aefbc758ad211988cf4792$export$isNodeEnv(env) {
  return typeof $dbfc4835a0aefbc758ad211988cf4792$var$process !== "undefined" && $dbfc4835a0aefbc758ad211988cf4792$var$process.env && "production" === env;
}
/** Returns whether the value is a function. Acts as a type guard. */
// tslint:disable-next-line:ban-types


$dbfc4835a0aefbc758ad211988cf4792$exports.isNodeEnv = $dbfc4835a0aefbc758ad211988cf4792$export$isNodeEnv;

function $dbfc4835a0aefbc758ad211988cf4792$export$isFunction(value) {
  return typeof value === "function";
}
/**
 * Returns true if `node` is null/undefined, false, empty string, or an array
 * composed of those. If `node` is an array, only one level of the array is
 * checked, for performance reasons.
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.isFunction = $dbfc4835a0aefbc758ad211988cf4792$export$isFunction;

function $dbfc4835a0aefbc758ad211988cf4792$export$isReactNodeEmpty(node, skipArray) {
  if (skipArray === void 0) {
    skipArray = false;
  }

  return node == null || node === "" || node === false || !skipArray && Array.isArray(node) && ( // only recurse one level through arrays, for performance
  node.length === 0 || node.every(function (n) {
    return $dbfc4835a0aefbc758ad211988cf4792$export$isReactNodeEmpty(n, true);
  }));
}
/**
 * Converts a React node to an element: non-empty string or number or
 * `React.Fragment` (React 16.3+) is wrapped in given tag name; empty strings
 * and booleans are discarded.
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.isReactNodeEmpty = $dbfc4835a0aefbc758ad211988cf4792$export$isReactNodeEmpty;

function $dbfc4835a0aefbc758ad211988cf4792$export$ensureElement(child, tagName) {
  if (tagName === void 0) {
    tagName = "span";
  }

  if (child == null || typeof child === "boolean") {
    return undefined;
  } else if (typeof child === "string") {
    // cull whitespace strings
    return child.trim().length > 0 ? $dbfc4835a0aefbc758ad211988cf4792$import$React.createElement(tagName, {}, child) : undefined;
  } else if (typeof child === "number" || typeof child.type === "symbol" || Array.isArray(child)) {
    // React.Fragment has a symbol type, ReactNodeArray extends from Array
    return $dbfc4835a0aefbc758ad211988cf4792$import$React.createElement(tagName, {}, child);
  } else if ($dbfc4835a0aefbc758ad211988cf4792$export$isReactElement(child)) {
    return child;
  } else {
    // child is inferred as {}
    return undefined;
  }
}

$dbfc4835a0aefbc758ad211988cf4792$exports.ensureElement = $dbfc4835a0aefbc758ad211988cf4792$export$ensureElement;

function $dbfc4835a0aefbc758ad211988cf4792$export$isReactElement(child) {
  return typeof child === "object" && typeof child.type !== "undefined" && typeof child.props !== "undefined";
}

$dbfc4835a0aefbc758ad211988cf4792$exports.isReactElement = $dbfc4835a0aefbc758ad211988cf4792$export$isReactElement;

function $dbfc4835a0aefbc758ad211988cf4792$export$getDisplayName(ComponentClass) {
  return ComponentClass.displayName || ComponentClass.name || "Unknown";
}
/**
 * Returns true if the given JSX element matches the given component type.
 *
 * NOTE: This function only checks equality of `displayName` for performance and
 * to tolerate multiple minor versions of a component being included in one
 * application bundle.
 * @param element JSX element in question
 * @param ComponentType desired component type of element
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.getDisplayName = $dbfc4835a0aefbc758ad211988cf4792$export$getDisplayName;

function $dbfc4835a0aefbc758ad211988cf4792$export$isElementOfType(element, ComponentType) {
  return element != null && element.type != null && element.type.displayName != null && element.type.displayName === ComponentType.displayName;
} // tslint:disable-next-line:ban-types


$dbfc4835a0aefbc758ad211988cf4792$exports.isElementOfType = $dbfc4835a0aefbc758ad211988cf4792$export$isElementOfType;

function $dbfc4835a0aefbc758ad211988cf4792$export$safeInvoke(func) {
  var args = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }

  if ($dbfc4835a0aefbc758ad211988cf4792$export$isFunction(func)) {
    return func.apply(void 0, args);
  }

  return undefined;
} // tslint:disable-next-line:ban-types


$dbfc4835a0aefbc758ad211988cf4792$exports.safeInvoke = $dbfc4835a0aefbc758ad211988cf4792$export$safeInvoke;

function $dbfc4835a0aefbc758ad211988cf4792$export$safeInvokeOrValue(funcOrValue) {
  var args = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }

  return $dbfc4835a0aefbc758ad211988cf4792$export$isFunction(funcOrValue) ? funcOrValue.apply(void 0, args) : funcOrValue;
}

$dbfc4835a0aefbc758ad211988cf4792$exports.safeInvokeOrValue = $dbfc4835a0aefbc758ad211988cf4792$export$safeInvokeOrValue;

function $dbfc4835a0aefbc758ad211988cf4792$export$elementIsOrContains(element, testElement) {
  return element === testElement || element.contains(testElement);
}
/**
 * Returns the difference in length between two arrays. A `null` argument is
 * considered an empty list. The return value will be positive if `a` is longer
 * than `b`, negative if the opposite is true, and zero if their lengths are
 * equal.
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.elementIsOrContains = $dbfc4835a0aefbc758ad211988cf4792$export$elementIsOrContains;

function $dbfc4835a0aefbc758ad211988cf4792$export$arrayLengthCompare(a, b) {
  if (a === void 0) {
    a = [];
  }

  if (b === void 0) {
    b = [];
  }

  return a.length - b.length;
}
/**
 * Returns true if the two numbers are within the given tolerance of each other.
 * This is useful to correct for floating point precision issues, less useful
 * for integers.
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.arrayLengthCompare = $dbfc4835a0aefbc758ad211988cf4792$export$arrayLengthCompare;

function $dbfc4835a0aefbc758ad211988cf4792$export$approxEqual(a, b, tolerance) {
  if (tolerance === void 0) {
    tolerance = 0.00001;
  }

  return Math.abs(a - b) <= tolerance;
}
/**
 * Clamps the given number between min and max values. Returns value if within
 * range, or closest bound.
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.approxEqual = $dbfc4835a0aefbc758ad211988cf4792$export$approxEqual;

function $dbfc4835a0aefbc758ad211988cf4792$export$clamp(val, min, max) {
  if (val == null) {
    return val;
  }

  if (max < min) {
    throw new Error($dbfc4835a0aefbc758ad211988cf4792$import$CLAMP_MIN_MAX);
  }

  return Math.min(Math.max(val, min), max);
}
/** Returns the number of decimal places in the given number. */


$dbfc4835a0aefbc758ad211988cf4792$exports.clamp = $dbfc4835a0aefbc758ad211988cf4792$export$clamp;

function $dbfc4835a0aefbc758ad211988cf4792$export$countDecimalPlaces(num) {
  if (!isFinite(num)) {
    return 0;
  }

  var e = 1,
      p = 0;

  while (Math.round(num * e) / e !== num) {
    e *= 10;
    p++;
  }

  return p;
}
/**
 * Throttle an event on an EventTarget by wrapping it in a
 * `requestAnimationFrame` call. Returns the event handler that was bound to
 * given eventName so you can clean up after yourself.
 * @see https://developer.mozilla.org/en-US/docs/Web/Events/scroll
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.countDecimalPlaces = $dbfc4835a0aefbc758ad211988cf4792$export$countDecimalPlaces;

function $dbfc4835a0aefbc758ad211988cf4792$export$throttleEvent(target, eventName, newEventName) {
  var throttledFunc = $dbfc4835a0aefbc758ad211988cf4792$var$_throttleHelper(function (event) {
    target.dispatchEvent(new CustomEvent(newEventName, event));
  });
  target.addEventListener(eventName, throttledFunc);
  return throttledFunc;
}
/**
 * Throttle a callback by wrapping it in a `requestAnimationFrame` call. Returns
 * the throttled function.
 * @see https://www.html5rocks.com/en/tutorials/speed/animations/
 */


$dbfc4835a0aefbc758ad211988cf4792$exports.throttleEvent = $dbfc4835a0aefbc758ad211988cf4792$export$throttleEvent;

function $dbfc4835a0aefbc758ad211988cf4792$export$throttleReactEventCallback(callback, options) {
  if (options === void 0) {
    options = {};
  }

  var throttledFunc = $dbfc4835a0aefbc758ad211988cf4792$var$_throttleHelper(callback, function (event2) {
    if (options.preventDefault) {
      event2.preventDefault();
    }
  }, // prevent React from reclaiming the event object before we reference it
  function (event2) {
    return event2.persist();
  });
  return throttledFunc;
}
/**
 * Throttle a method by wrapping it in a `requestAnimationFrame` call. Returns
 * the throttled function.
 */
// tslint:disable-next-line:ban-types


$dbfc4835a0aefbc758ad211988cf4792$exports.throttleReactEventCallback = $dbfc4835a0aefbc758ad211988cf4792$export$throttleReactEventCallback;

function $dbfc4835a0aefbc758ad211988cf4792$export$throttle(method) {
  return $dbfc4835a0aefbc758ad211988cf4792$var$_throttleHelper(method);
} // tslint:disable-next-line:ban-types


$dbfc4835a0aefbc758ad211988cf4792$exports.throttle = $dbfc4835a0aefbc758ad211988cf4792$export$throttle;

function $dbfc4835a0aefbc758ad211988cf4792$var$_throttleHelper(onAnimationFrameRequested, onBeforeIsRunningCheck, onAfterIsRunningCheck) {
  var isRunning = false;

  var func = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    } // don't use safeInvoke, because we might have more than its max number
    // of typed params


    if ($dbfc4835a0aefbc758ad211988cf4792$export$isFunction(onBeforeIsRunningCheck)) {
      onBeforeIsRunningCheck.apply(void 0, args);
    }

    if (isRunning) {
      return;
    }

    isRunning = true;

    if ($dbfc4835a0aefbc758ad211988cf4792$export$isFunction(onAfterIsRunningCheck)) {
      onAfterIsRunningCheck.apply(void 0, args);
    }

    requestAnimationFrame(function () {
      onAnimationFrameRequested.apply(void 0, args);
      isRunning = false;
    });
  };

  return func;
} //# sourceMappingURL=utils.js.map