var $f929cd5c030c9a3c54afd41f07833d82$exports = {};

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var $f929cd5c030c9a3c54afd41f07833d82$var$__DEV__ = "production" !== 'production';

var $f929cd5c030c9a3c54afd41f07833d82$var$warning = function () {};

if ($f929cd5c030c9a3c54afd41f07833d82$var$__DEV__) {
  var $f929cd5c030c9a3c54afd41f07833d82$var$printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);

    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };

  $f929cd5c030c9a3c54afd41f07833d82$var$warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);

    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }

    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (!condition) {
      $f929cd5c030c9a3c54afd41f07833d82$var$printWarning.apply(null, [format].concat(args));
    }
  };
}

$f929cd5c030c9a3c54afd41f07833d82$exports = $f929cd5c030c9a3c54afd41f07833d82$var$warning;