var $eeca2b26964fb340ca252ca7d4e430eb$exports = {};
$parcel$require("eeca2b26964fb340ca252ca7d4e430eb", "tslib");
$parcel$require("eeca2b26964fb340ca252ca7d4e430eb", "classnames");
$parcel$require("eeca2b26964fb340ca252ca7d4e430eb", "react");
$parcel$require("eeca2b26964fb340ca252ca7d4e430eb", "../../common/classes");
$parcel$require("eeca2b26964fb340ca252ca7d4e430eb", "../../common/props");

// this component is simple enough that tests would be purely tautological.

/* istanbul ignore next */
var $eeca2b26964fb340ca252ca7d4e430eb$export$TextArea =
/** @class */
function (_super) {
  $eeca2b26964fb340ca252ca7d4e430eb$import$tslib_1.__extends(TextArea, _super);

  function TextArea() {
    var _this = _super !== null && _super.apply(this, arguments) || this;

    _this.state = {};

    _this.handleChange = function (e) {
      if (_this.props.growVertically) {
        _this.setState({
          height: e.target.scrollHeight
        });
      }

      if (_this.props.onChange != null) {
        _this.props.onChange(e);
      }
    };

    return _this;
  }

  TextArea.prototype.render = function () {
    var _a = this.props,
        className = _a.className,
        fill = _a.fill,
        inputRef = _a.inputRef,
        intent = _a.intent,
        large = _a.large,
        small = _a.small,
        growVertically = _a.growVertically,
        htmlProps = $eeca2b26964fb340ca252ca7d4e430eb$import$tslib_1.__rest(_a, ["className", "fill", "inputRef", "intent", "large", "small", "growVertically"]);

    var rootClasses = $eeca2b26964fb340ca252ca7d4e430eb$import$classNames($eeca2b26964fb340ca252ca7d4e430eb$import$Classes.INPUT, $eeca2b26964fb340ca252ca7d4e430eb$import$Classes.intentClass(intent), (_b = {}, _b[$eeca2b26964fb340ca252ca7d4e430eb$import$Classes.FILL] = fill, _b[$eeca2b26964fb340ca252ca7d4e430eb$import$Classes.LARGE] = large, _b[$eeca2b26964fb340ca252ca7d4e430eb$import$Classes.SMALL] = small, _b), className); // add explicit height style while preserving user-supplied styles if they exist

    var _c = htmlProps.style,
        style = _c === void 0 ? {} : _c;

    if (growVertically && this.state.height != null) {
      // this style object becomes non-extensible when mounted (at least in the enzyme renderer),
      // so we make a new one to add a property
      style = $eeca2b26964fb340ca252ca7d4e430eb$import$tslib_1.__assign({}, style, {
        height: this.state.height + "px"
      });
    }

    return $eeca2b26964fb340ca252ca7d4e430eb$import$React.createElement("textarea", $eeca2b26964fb340ca252ca7d4e430eb$import$tslib_1.__assign({}, htmlProps, {
      className: rootClasses,
      onChange: this.handleChange,
      ref: inputRef,
      style: style
    }));

    var _b;
  };

  TextArea.displayName = $eeca2b26964fb340ca252ca7d4e430eb$import$DISPLAYNAME_PREFIX + ".TextArea";
  return TextArea;
}($eeca2b26964fb340ca252ca7d4e430eb$import$React.PureComponent);

$eeca2b26964fb340ca252ca7d4e430eb$exports.TextArea = $eeca2b26964fb340ca252ca7d4e430eb$export$TextArea;