var $ad47b2a93632931dd094ce21f883747f$exports = {};
$parcel$require("ad47b2a93632931dd094ce21f883747f", "tslib");
$parcel$require("ad47b2a93632931dd094ce21f883747f", "classnames");
$parcel$require("ad47b2a93632931dd094ce21f883747f", "react");
$parcel$require("ad47b2a93632931dd094ce21f883747f", "react-dom");
$parcel$require("ad47b2a93632931dd094ce21f883747f", "../../common");
$parcel$require("ad47b2a93632931dd094ce21f883747f", "../../components");
$parcel$require("ad47b2a93632931dd094ce21f883747f", "./hotkey");
$parcel$require("ad47b2a93632931dd094ce21f883747f", "./hotkeys");

/**
 * The delay before showing or hiding the dialog. Should be long enough to
 * allow all registered hotkey listeners to execute first.
 */
var $ad47b2a93632931dd094ce21f883747f$var$DELAY_IN_MS = 10;

var $ad47b2a93632931dd094ce21f883747f$var$HotkeysDialog =
/** @class */
function () {
  function HotkeysDialog() {
    var _this = this;

    this.componentProps = {
      globalHotkeysGroup: "Global hotkeys"
    };
    this.hotkeysQueue = [];
    this.isDialogShowing = false;

    this.show = function () {
      _this.isDialogShowing = true;

      _this.render();
    };

    this.hide = function () {
      _this.isDialogShowing = false;

      _this.render();
    };
  }

  HotkeysDialog.prototype.render = function () {
    if (this.container == null) {
      this.container = this.getContainer();
    }

    $ad47b2a93632931dd094ce21f883747f$import$ReactDOM.render(this.renderComponent(), this.container);
  };

  HotkeysDialog.prototype.unmount = function () {
    if (this.container != null) {
      $ad47b2a93632931dd094ce21f883747f$import$ReactDOM.unmountComponentAtNode(this.container);
      this.container.remove();
      delete this.container;
    }
  };
  /**
   * Because hotkeys can be registered globally and locally and because
   * event ordering cannot be guaranteed, we use this debouncing method to
   * allow all hotkey listeners to fire and add their hotkeys to the dialog.
   *
   * 10msec after the last listener adds their hotkeys, we render the dialog
   * and clear the queue.
   */


  HotkeysDialog.prototype.enqueueHotkeysForDisplay = function (hotkeys) {
    this.hotkeysQueue.push(hotkeys); // reset timeout for debounce

    window.clearTimeout(this.showTimeoutToken);
    this.showTimeoutToken = window.setTimeout(this.show, $ad47b2a93632931dd094ce21f883747f$var$DELAY_IN_MS);
  };

  HotkeysDialog.prototype.hideAfterDelay = function () {
    window.clearTimeout(this.hideTimeoutToken);
    this.hideTimeoutToken = window.setTimeout(this.hide, $ad47b2a93632931dd094ce21f883747f$var$DELAY_IN_MS);
  };

  HotkeysDialog.prototype.isShowing = function () {
    return this.isDialogShowing;
  };

  HotkeysDialog.prototype.getContainer = function () {
    if (this.container == null) {
      this.container = document.createElement("div");
      this.container.classList.add($ad47b2a93632931dd094ce21f883747f$import$Classes.PORTAL);
      document.body.appendChild(this.container);
    }

    return this.container;
  };

  HotkeysDialog.prototype.renderComponent = function () {
    return $ad47b2a93632931dd094ce21f883747f$import$React.createElement($ad47b2a93632931dd094ce21f883747f$import$Dialog, $ad47b2a93632931dd094ce21f883747f$import$tslib_1.__assign({}, this.componentProps, {
      className: $ad47b2a93632931dd094ce21f883747f$import$classNames($ad47b2a93632931dd094ce21f883747f$import$Classes.HOTKEY_DIALOG, this.componentProps.className),
      isOpen: this.isDialogShowing,
      onClose: this.hide
    }), $ad47b2a93632931dd094ce21f883747f$import$React.createElement("div", {
      className: $ad47b2a93632931dd094ce21f883747f$import$Classes.DIALOG_BODY
    }, this.renderHotkeys()));
  };

  HotkeysDialog.prototype.renderHotkeys = function () {
    var _this = this;

    var hotkeys = this.emptyHotkeyQueue();
    var elements = hotkeys.map(function (hotkey, index) {
      var group = hotkey.global === true && hotkey.group == null ? _this.componentProps.globalHotkeysGroup : hotkey.group;
      return $ad47b2a93632931dd094ce21f883747f$import$React.createElement($ad47b2a93632931dd094ce21f883747f$import$Hotkey, $ad47b2a93632931dd094ce21f883747f$import$tslib_1.__assign({
        key: index
      }, hotkey, {
        group: group
      }));
    });
    return $ad47b2a93632931dd094ce21f883747f$import$React.createElement($ad47b2a93632931dd094ce21f883747f$import$Hotkeys, null, elements);
  };

  HotkeysDialog.prototype.emptyHotkeyQueue = function () {
    // flatten then empty the hotkeys queue
    var hotkeys = this.hotkeysQueue.reduce(function (arr, queued) {
      return arr.concat(queued);
    }, []);
    this.hotkeysQueue.length = 0;
    return hotkeys;
  };

  return HotkeysDialog;
}(); // singleton instance


var $ad47b2a93632931dd094ce21f883747f$var$HOTKEYS_DIALOG = new $ad47b2a93632931dd094ce21f883747f$var$HotkeysDialog();

function $ad47b2a93632931dd094ce21f883747f$export$isHotkeysDialogShowing() {
  return $ad47b2a93632931dd094ce21f883747f$var$HOTKEYS_DIALOG.isShowing();
}

$ad47b2a93632931dd094ce21f883747f$exports.isHotkeysDialogShowing = $ad47b2a93632931dd094ce21f883747f$export$isHotkeysDialogShowing;

function $ad47b2a93632931dd094ce21f883747f$export$setHotkeysDialogProps(props) {
  for (var key in props) {
    if (props.hasOwnProperty(key)) {
      $ad47b2a93632931dd094ce21f883747f$var$HOTKEYS_DIALOG.componentProps[key] = props[key];
    }
  }
}

$ad47b2a93632931dd094ce21f883747f$exports.setHotkeysDialogProps = $ad47b2a93632931dd094ce21f883747f$export$setHotkeysDialogProps;

function $ad47b2a93632931dd094ce21f883747f$export$showHotkeysDialog(hotkeys) {
  $ad47b2a93632931dd094ce21f883747f$var$HOTKEYS_DIALOG.enqueueHotkeysForDisplay(hotkeys);
}

$ad47b2a93632931dd094ce21f883747f$exports.showHotkeysDialog = $ad47b2a93632931dd094ce21f883747f$export$showHotkeysDialog;

function $ad47b2a93632931dd094ce21f883747f$export$hideHotkeysDialog() {
  $ad47b2a93632931dd094ce21f883747f$var$HOTKEYS_DIALOG.hide();
}
/**
 * Use this function instead of `hideHotkeysDialog` if you need to ensure that all hotkey listeners
 * have time to execute with the dialog in a consistent open state. This can avoid flickering the
 * dialog between open and closedÂ states as successive listeners fire.
 */


$ad47b2a93632931dd094ce21f883747f$exports.hideHotkeysDialog = $ad47b2a93632931dd094ce21f883747f$export$hideHotkeysDialog;

function $ad47b2a93632931dd094ce21f883747f$export$hideHotkeysDialogAfterDelay() {
  $ad47b2a93632931dd094ce21f883747f$var$HOTKEYS_DIALOG.hideAfterDelay();
} //# sourceMappingURL=hotkeysDialog.js.map


$ad47b2a93632931dd094ce21f883747f$exports.hideHotkeysDialogAfterDelay = $ad47b2a93632931dd094ce21f883747f$export$hideHotkeysDialogAfterDelay;