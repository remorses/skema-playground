var $a7da6633d0fec58c781495c3e9d3$exports = {};
$parcel$require("7817a7da6633d0fec58c781495c3e9d3", "tslib");
var $a7da6633d0fec58c781495c3e9d3$export$DISPLAYNAME_PREFIX = "Blueprint3";
/** A collection of curated prop keys used across our Components which are not valid HTMLElement props. */

$a7da6633d0fec58c781495c3e9d3$exports.DISPLAYNAME_PREFIX = $a7da6633d0fec58c781495c3e9d3$export$DISPLAYNAME_PREFIX;
var $a7da6633d0fec58c781495c3e9d3$var$INVALID_PROPS = ["active", "alignText", "containerRef", "elementRef", "fill", "icon", "inputRef", "intent", "inline", "large", "loading", "leftIcon", "minimal", "onChildrenMount", "onRemove", "popoverProps", "rightElement", "rightIcon", "round", "small", "text"];
/**
 * Typically applied to HTMLElements to filter out blacklisted props. When applied to a Component,
 * can filter props from being passed down to the children. Can also filter by a combined list of
 * supplied prop keys and the blacklist (only appropriate for HTMLElements).
 * @param props The original props object to filter down.
 * @param {string[]} invalidProps If supplied, overwrites the default blacklist.
 * @param {boolean} shouldMerge If true, will merge supplied invalidProps and blacklist together.
 */

function $a7da6633d0fec58c781495c3e9d3$export$removeNonHTMLProps(props, invalidProps, shouldMerge) {
  if (invalidProps === void 0) {
    invalidProps = $a7da6633d0fec58c781495c3e9d3$var$INVALID_PROPS;
  }

  if (shouldMerge === void 0) {
    shouldMerge = false;
  }

  if (shouldMerge) {
    invalidProps = invalidProps.concat($a7da6633d0fec58c781495c3e9d3$var$INVALID_PROPS);
  }

  return invalidProps.reduce(function (prev, curr) {
    if (prev.hasOwnProperty(curr)) {
      delete prev[curr];
    }

    return prev;
  }, $a7da6633d0fec58c781495c3e9d3$import$tslib_1.__assign({}, props));
} //# sourceMappingURL=props.js.map


$a7da6633d0fec58c781495c3e9d3$exports.removeNonHTMLProps = $a7da6633d0fec58c781495c3e9d3$export$removeNonHTMLProps;