var $dfff24d59713c89c998db51526208ca5$exports = {};

var $dfff24d59713c89c998db51526208ca5$var$__importStar = $dfff24d59713c89c998db51526208ca5$exports && $dfff24d59713c89c998db51526208ca5$exports.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result["default"] = mod;
  return result;
};

Object.defineProperty($dfff24d59713c89c998db51526208ca5$exports, "__esModule", {
  value: true
});
const $dfff24d59713c89c998db51526208ca5$var$React = $dfff24d59713c89c998db51526208ca5$var$__importStar($parcel$require("dfff24d59713c89c998db51526208ca5", "react"));
const $dfff24d59713c89c998db51526208ca5$var$blueprint_1 = $parcel$require("dfff24d59713c89c998db51526208ca5", "./components/blueprint");

const $dfff24d59713c89c998db51526208ca5$var$mapSchemaToComponents = ({
  schema,
  components,
  previousKey = 'root',
  skipValidation,
  formProps = {}
}) => {
  // console.log('"' + schema.title + '"')
  const prettyKey = $dfff24d59713c89c998db51526208ca5$var$humanize(previousKey.split('.').pop().replace(/\[\d\]/, ''));
  const title = $dfff24d59713c89c998db51526208ca5$var$humanize(schema.title || '');
  const desc = $dfff24d59713c89c998db51526208ca5$var$humanize(schema.description || title || prettyKey || '');
  const label = desc;
  const placeholder = title || prettyKey;

  if (schema.enum) {
    const transformer = $dfff24d59713c89c998db51526208ca5$var$transform(schema);
    const items = schema.enum.map(transformer);
    const options = items.map(value => ({
      value,
      label: $dfff24d59713c89c998db51526208ca5$var$humanize(value)
    }));
    return $dfff24d59713c89c998db51526208ca5$var$React.createElement($dfff24d59713c89c998db51526208ca5$var$blueprint_1.Select, {
      key: previousKey + schema.title,
      name: previousKey,
      label: label,
      options: options
    });
  }

  switch (schema.type) {
    case 'object':
      const {
        properties = []
      } = schema;
      const Container = previousKey === 'root' ? $dfff24d59713c89c998db51526208ca5$var$blueprint_1.RootContainer : $dfff24d59713c89c998db51526208ca5$var$blueprint_1.ObjectContainer;
      return $dfff24d59713c89c998db51526208ca5$var$React.createElement(Container, {
        currentKey: previousKey,
        title: title,
        description: schema.description
      }, Object.entries(properties).map(([name, subset]) => $dfff24d59713c89c998db51526208ca5$var$React.createElement($dfff24d59713c89c998db51526208ca5$var$blueprint_1.PropertyContainer, {
        key: previousKey + name
      }, $dfff24d59713c89c998db51526208ca5$var$mapSchemaToComponents({
        schema: subset,
        components,
        skipValidation,
        previousKey: `${previousKey}.${name}`,
        formProps
      }))));

    case 'array':
      const {
        items: subset = {}
      } = schema;

      if (subset.enum) {
        const items = subset.enum;
        throw Error('not implemented');
      } else if (subset.type === 'string' || subset.type === 'number') {
        throw Error('not implemented');
      }

    case 'string':
      return $dfff24d59713c89c998db51526208ca5$var$React.createElement($dfff24d59713c89c998db51526208ca5$var$blueprint_1.TextField, {
        placeholder: placeholder,
        name: previousKey,
        label: label
      });

    case 'number':
      const {
        minimum: min = null,
        exclusiveMaximum: max = null,
        multipleOf: step = 0.1
      } = schema;
      const transformer = $dfff24d59713c89c998db51526208ca5$var$transform(schema);
      return $dfff24d59713c89c998db51526208ca5$var$React.createElement($dfff24d59713c89c998db51526208ca5$var$blueprint_1.NumberInput, {
        name: previousKey,
        label: label
      });

    case 'boolean':
      {
        return $dfff24d59713c89c998db51526208ca5$var$React.createElement($dfff24d59713c89c998db51526208ca5$var$blueprint_1.Switch, {
          name: previousKey,
          label: label
        });
      }

    default:
      throw Error(JSON.stringify(schema, null, '    ') + ' not implemented ');
  }
};

const $dfff24d59713c89c998db51526208ca5$var$transform = schema => v => {
  const {
    type = 'string'
  } = schema;

  switch (type) {
    case 'string':
      return String(v).toString();

    case 'number':
      return Number(v);

    default:
      return String(v).toString();
  }
};

const $dfff24d59713c89c998db51526208ca5$var$getEventValue = e => {
  let value;

  try {
    value = e.target.value;
  } catch (err) {
    // console.log('catched', err)
    value = e;
  }

  return value;
};

const $dfff24d59713c89c998db51526208ca5$var$humanize = value => {
  value = value.replace(/_/g, ' ');
  value = value.charAt(0).toUpperCase() + value.slice(1);
  value = value.replace(/([A-Z])/g, ' $1');
  value = value.replace(/^./, str => str.toUpperCase());
  return value;
}; // const Row = styled.div`
//     display: flex;
//     flex-direction: row;
//     justify-content: space-between;
// `


var $dfff24d59713c89c998db51526208ca5$export$default = $dfff24d59713c89c998db51526208ca5$var$mapSchemaToComponents;
$dfff24d59713c89c998db51526208ca5$exports.default = $dfff24d59713c89c998db51526208ca5$export$default; //# sourceMappingURL=mapSchemaToComponents.js.map